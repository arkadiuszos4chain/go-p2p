// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/libsv/go-p2p/better_p2p"
	"github.com/libsv/go-p2p/wire"
	"sync"
)

// Ensure, that MessageHandlerIMock does implement better_p2p.MessageHandlerI.
// If this is not the case, regenerate this file with moq.
var _ better_p2p.MessageHandlerI = &MessageHandlerIMock{}

// MessageHandlerIMock is a mock implementation of better_p2p.MessageHandlerI.
//
//	func TestSomethingThatUsesMessageHandlerI(t *testing.T) {
//
//		// make and configure a mocked better_p2p.MessageHandlerI
//		mockedMessageHandlerI := &MessageHandlerIMock{
//			OnReceiveFunc: func(msg wire.Message, peer better_p2p.PeerI)  {
//				panic("mock out the OnReceive method")
//			},
//			OnSendFunc: func(msg wire.Message, peer better_p2p.PeerI)  {
//				panic("mock out the OnSend method")
//			},
//		}
//
//		// use mockedMessageHandlerI in code that requires better_p2p.MessageHandlerI
//		// and then make assertions.
//
//	}
type MessageHandlerIMock struct {
	// OnReceiveFunc mocks the OnReceive method.
	OnReceiveFunc func(msg wire.Message, peer better_p2p.PeerI)

	// OnSendFunc mocks the OnSend method.
	OnSendFunc func(msg wire.Message, peer better_p2p.PeerI)

	// calls tracks calls to the methods.
	calls struct {
		// OnReceive holds details about calls to the OnReceive method.
		OnReceive []struct {
			// Msg is the msg argument value.
			Msg wire.Message
			// Peer is the peer argument value.
			Peer better_p2p.PeerI
		}
		// OnSend holds details about calls to the OnSend method.
		OnSend []struct {
			// Msg is the msg argument value.
			Msg wire.Message
			// Peer is the peer argument value.
			Peer better_p2p.PeerI
		}
	}
	lockOnReceive sync.RWMutex
	lockOnSend    sync.RWMutex
}

// OnReceive calls OnReceiveFunc.
func (mock *MessageHandlerIMock) OnReceive(msg wire.Message, peer better_p2p.PeerI) {
	if mock.OnReceiveFunc == nil {
		panic("MessageHandlerIMock.OnReceiveFunc: method is nil but MessageHandlerI.OnReceive was just called")
	}
	callInfo := struct {
		Msg  wire.Message
		Peer better_p2p.PeerI
	}{
		Msg:  msg,
		Peer: peer,
	}
	mock.lockOnReceive.Lock()
	mock.calls.OnReceive = append(mock.calls.OnReceive, callInfo)
	mock.lockOnReceive.Unlock()
	mock.OnReceiveFunc(msg, peer)
}

// OnReceiveCalls gets all the calls that were made to OnReceive.
// Check the length with:
//
//	len(mockedMessageHandlerI.OnReceiveCalls())
func (mock *MessageHandlerIMock) OnReceiveCalls() []struct {
	Msg  wire.Message
	Peer better_p2p.PeerI
} {
	var calls []struct {
		Msg  wire.Message
		Peer better_p2p.PeerI
	}
	mock.lockOnReceive.RLock()
	calls = mock.calls.OnReceive
	mock.lockOnReceive.RUnlock()
	return calls
}

// OnSend calls OnSendFunc.
func (mock *MessageHandlerIMock) OnSend(msg wire.Message, peer better_p2p.PeerI) {
	if mock.OnSendFunc == nil {
		panic("MessageHandlerIMock.OnSendFunc: method is nil but MessageHandlerI.OnSend was just called")
	}
	callInfo := struct {
		Msg  wire.Message
		Peer better_p2p.PeerI
	}{
		Msg:  msg,
		Peer: peer,
	}
	mock.lockOnSend.Lock()
	mock.calls.OnSend = append(mock.calls.OnSend, callInfo)
	mock.lockOnSend.Unlock()
	mock.OnSendFunc(msg, peer)
}

// OnSendCalls gets all the calls that were made to OnSend.
// Check the length with:
//
//	len(mockedMessageHandlerI.OnSendCalls())
func (mock *MessageHandlerIMock) OnSendCalls() []struct {
	Msg  wire.Message
	Peer better_p2p.PeerI
} {
	var calls []struct {
		Msg  wire.Message
		Peer better_p2p.PeerI
	}
	mock.lockOnSend.RLock()
	calls = mock.calls.OnSend
	mock.lockOnSend.RUnlock()
	return calls
}
